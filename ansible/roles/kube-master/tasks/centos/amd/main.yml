--- 
- name: Online download kubernetes server packages
  ansible.builtin.get_url:
    url: https://dl.k8s.io/{{ kubernetes_version }}/kubernetes-server-linux-amd64.tar.gz
    dest: "{{ deploy_dir }}/packages/"
    checksum: sha512:cd54f2f48733806208d3b1585ed307bebf91893e250a1eb3e18355c9a9e6d1f75a70966cb66165be2fbb8566e5368b14f66f63a8929fbceca30aa73bfd491441
  delegate_to: localhost
  run_once: yes

- name: Online download kubernetes client packages
  ansible.builtin.get_url:
    url: https://dl.k8s.io/{{ kubernetes_version }}/kubernetes-client-linux-amd64.tar.gz
    dest: "{{ deploy_dir }}/packages/"
    checksum: sha512:ab534cd06d8cc89d1288590cfae98415facaa7db2f481d8f6be0a20574d2990cc55348cf98386c34df7788aa80ff018fc844816a2b605bcb350a82d752738fdc
  delegate_to: localhost
  run_once: yes


  
- name: Installing kubernetes-client on the current deployment machine
  ansible.builtin.unarchive:
    src: "{{ deploy_dir }}/packages/kubernetes-client-linux-amd64.tar.gz"
    dest: /usr/local/bin/
    extra_opts:
      - --strip-components=3
  tags:
    - install-kube-client
  delegate_to: localhost
  run_once: yes

- name: Prepare kube-apiserver certificate related files
  block:
    - name: Preparing kube-apiserver Profiles and Signature Requests
      ansible.builtin.template:
        src: kube-apiserver-csr.json.j2
        dest: "{{ deploy_dir }}/ssl/kube-apiserver-csr.json"
    
    - name: Create an kube-apiserver certificate and private key
      ansible.builtin.shell: "cd {{ deploy_dir }}/ssl/ && \
        ../bin/cfssl gencert -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes kube-apiserver-csr.json |  ../bin/cfssljson -bare kube-apiserver"
  delegate_to: localhost
  run_once: yes
  tags:
    - kube-master-cert
    - kube-apiserver-cert

- name: Prepare front-proxy certificate related files
  block:
    - name: Preparing front-proxy Profiles and Signature Requests
      ansible.builtin.template:
        src: front-proxy-csr.json.j2
        dest: "{{ deploy_dir }}/ssl/front-proxy-csr.json"
    
    - name: Create an front-proxy certificate and private key
      ansible.builtin.shell: "cd {{ deploy_dir }}/ssl/ && \
        ../bin/cfssl gencert -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes front-proxy-csr.json |  ../bin/cfssljson -bare front-proxy"
  delegate_to: localhost
  run_once: yes
  tags:
    - kube-master-cert
    - front-proxy-cert

- name: Prepare kube-controller-manager certificate related files
  block:
    - name: Preparing kube-controller-manager Profiles and Signature Requests
      ansible.builtin.template:
        src: kube-controller-manager-csr.json.j2
        dest: "{{ deploy_dir }}/ssl/kube-controller-manager-csr.json"
    
    - name: Create an kube-controller-manager certificate and private key
      ansible.builtin.shell: "cd {{ deploy_dir }}/ssl/ && \
        ../bin/cfssl gencert -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes kube-controller-manager-csr.json |  ../bin/cfssljson -bare kube-controller-manager"
  delegate_to: localhost
  run_once: yes
  tags:
    - kube-master-cert
    - kube-controller-manager-cert

- name: Prepare kube-scheduler certificate related files
  block:
    - name: Preparing kube-scheduler Profiles and Signature Requests
      ansible.builtin.template:
        src: kube-scheduler-csr.json.j2
        dest: "{{ deploy_dir }}/ssl/kube-scheduler-csr.json"
    
    - name: Create an kube-scheduler certificate and private key
      ansible.builtin.shell: "cd {{ deploy_dir }}/ssl/ && \
        ../bin/cfssl gencert -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes kube-scheduler-csr.json |  ../bin/cfssljson -bare kube-scheduler"
  delegate_to: localhost
  run_once: yes
  tags:
    - kube-master-cert
    - kube-scheduler-cert


- name: Preparing the kube-controller-manager kubeconfig file
  block:
    - name: Setting up a kube-controller-manager cluster entry
      ansible.builtin.command: >
        /usr/local/bin/kubectl config set-cluster kubernetes \
          --certificate-authority={{ deploy_dir }}/ssl/ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=/kube-controller-manager.kubeconfig
    - name: kube-controller-manager > Sets up a cluster context item and specifies the user.
      ansible.builtin.shell: >
        /usr/local/bin/kubectl config set-context system:kube-controller-manager@kubernetes \
          --cluster=kubernetes \
          --user=system:kube-controller-manager \
          --kubeconfig=/kube-controller-manager.kubeconfig
    - name: kube-controller-manager > Setting up a user authentication credential
      ansible.builtin.shell: >
        /usr/local/bin/kubectl  config set-credentials system:kube-controller-manager \
          --client-certificate={{ deploy_dir }}/ssl/kube-controller-manager.pem \
          --client-key={{ deploy_dir }}/ssl/kube-controller-manager-key.pem \
          --embed-certs=true \
          --kubeconfig=/kube-controller-manager.kubeconfig
    - name: kube-controller-manager > Setting the Default Context Environment
      ansible.builtin.shell: >
        /usr/local/bin/kubectl config use-context system:kube-controller-manager@kubernetes \
          --kubeconfig=/kube-controller-manager.kubeconfig
    - name: Moving the kube-controller-manager cluster environment configuration file to the persistence directory
      ansible.builtin.shell: >
        mv /kube-controller-manager.kubeconfig  {{ deploy_dir }}/context/
  delegate_to: localhost
  run_once: yes
  tags:
    - kube-controller-manager-context
    - kube-master-context
        
- name: Preparing the kube-scheduler kubeconfig file
  block:
    - name: Setting up a kube-scheduler cluster entry
      ansible.builtin.command: >
        /usr/local/bin/kubectl config set-cluster kubernetes \
          --certificate-authority={{ deploy_dir }}/ssl/ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=/kube-scheduler.kubeconfig
    - name: kube-scheduler > Sets up a cluster context item and specifies the user.
      ansible.builtin.shell: >
        /usr/local/bin/kubectl config set-context system:kube-scheduler@kubernetes \
          --cluster=kubernetes \
          --user=system:kube-scheduler \
          --kubeconfig=/kube-scheduler.kubeconfig
    - name: kube-scheduler > Setting up a user authentication credential
      ansible.builtin.shell: >
        /usr/local/bin/kubectl  config set-credentials system:kube-scheduler \
          --client-certificate={{ deploy_dir }}/ssl/kube-scheduler.pem \
          --client-key={{ deploy_dir }}/ssl/kube-scheduler-key.pem \
          --embed-certs=true \
          --kubeconfig=/kube-scheduler.kubeconfig
    - name: kube-scheduler > Setting the Default Context Environment
      ansible.builtin.shell: >
        /usr/local/bin/kubectl config use-context system:kube-scheduler@kubernetes \
          --kubeconfig=/kube-scheduler.kubeconfig
    - name: Moving the kube-scheduler cluster environment configuration file to the persistence directory
      ansible.builtin.shell: >
        mv /kube-scheduler.kubeconfig  {{ deploy_dir }}/context/
  delegate_to: localhost
  run_once: yes
  tags:
    - kube-scheduler-context
    - kube-master-context

- name: Prepare ServiceAccount private and public keys
  ansible.builtin.shell: >
    openssl genrsa -out {{ deploy_dir }}/ssl/sa.key 2048 && \
    openssl rsa -in {{ deploy_dir }}/ssl/sa.key -pubout -out {{ deploy_dir }}/ssl/sa.pub
  args:
    creates: "{{ deploy_dir }}/ssl/sa.key"
  delegate_to: localhost
  run_once: yes
  tags:
    - ServiceAccount-cert
    - kube-master-cert

- name: Preparing the certificate storage directory
  ansible.builtin.file:
    path: /etc/kubernetes/pki/
    state: directory
    mode: 0755
  tags:
    - kube-dir

- name: Prepare the kubeconfig file storage directory
  ansible.builtin.file:
    path: /etc/kubernetes/kubeconfig/
    state: directory
    mode: 0755
  tags:
    - kube-dir

- name: Transmission-related certificates
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /etc/kubernetes/pki/
  with_items:
    - "{{ deploy_dir }}/ssl/"
  tags:
    - copy-kube-cert

- name: Transmission-related kubeconfig
  ansible.builtin.copy:
    src: "{{ deploy_dir }}/context/"
    dest: /etc/kubernetes/kubeconfig/
    mode: 0755
  tags:
    - copy-kubeconfig

- name: Installing kubernetes-server
  ansible.builtin.unarchive:
    src: "{{ deploy_dir }}/packages/kubernetes-server-linux-amd64.tar.gz"
    dest: /usr/local/bin/
    include:
      - kubernetes/server/bin/
    extra_opts:
      - --strip-components=3
  tags:
    - install-kube-server


- name: Transmission-related service
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0755
  with_items:
    - {src: "services/kube-apiserver.service.j2", dest: "/etc/systemd/system/kube-apiserver.service"}
    - {src: "services/kube-controller-manager.service.j2", dest: "/etc/systemd/system/kube-controller-manager.service"}
    - {src: "services/kube-scheduler.service.j2", dest: "/etc/systemd/system/kube-scheduler.service"}

  tags:
    - copy-kube-master-service


- name: Prepare admin certificate related files
  block:
    - name: Preparing admin Profiles and Signature Requests
      ansible.builtin.template:
        src: admin-csr.json.j2
        dest: "{{ deploy_dir }}/ssl/admin-csr.json"
    
    - name: Create an admin certificate and private key
      ansible.builtin.shell: "cd {{ deploy_dir }}/ssl/ && \
        ../bin/cfssl gencert -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes admin-csr.json |  ../bin/cfssljson -bare admin"
  delegate_to: localhost
  run_once: yes
  tags:
    - kube-master-cert
    - admin-cert


- name: Preparing the admin kubeconfig file
  block:
    - name: Setting up a admin cluster entry
      ansible.builtin.command: >
        /usr/local/bin/kubectl config set-cluster kubernetes \
          --certificate-authority={{ deploy_dir }}/ssl/ca.pem \
          --embed-certs=true \
          --server=https://{{ kube_apiserver_addr }}:6443 \
          --kubeconfig=/admin.kubeconfig
    - name: admin > Sets up a cluster context item and specifies the user.
      ansible.builtin.shell: >
        /usr/local/bin/kubectl config set-context kubernetes-admin@kubernetes \
          --cluster=kubernetes \
          --user=kubernetes-admin \
          --kubeconfig=/admin.kubeconfig
    - name: tls-bootstrap > Setting up a user authentication credential
      ansible.builtin.shell: >
        /usr/local/bin/kubectl  config set-credentials kubernetes-admin \
          --client-certificate={{ deploy_dir }}/ssl/admin.pem \
          --client-key={{ deploy_dir }}/ssl/admin-key.pem \
          --embed-certs=true \
          --kubeconfig=/admin.kubeconfig
    - name: tls-bootstrap > Setting the Default Context Environment
      ansible.builtin.shell: >
        /usr/local/bin/kubectl config use-context kubernetes-admin@kubernetes \
          --kubeconfig=/admin.kubeconfig
    - name: Moving the tls-bootstrap cluster environment configuration file to the persistence directory
      ansible.builtin.shell: >
        mv /admin.kubeconfig  {{ deploy_dir }}/context/
  delegate_to: localhost
  run_once: yes
  tags:
    - admin-context
    - kube-master-context


- name: Setting up the admin user to access the kubernetes cluster
  block:
    - name: Create ~/.kube/  directory 
      ansible.builtin.file:
        path: ~/.kube/
        state: directory

    - name: Transmission-related admin kubeconfig
      ansible.builtin.copy:
        src: "{{ deploy_dir }}/context/admin.kubeconfig"
        dest: "~/.kube/config"

    - name: Create ~/.kube/ localhost directory
      ansible.builtin.file:
        path: ~/.kube/
        state: directory
      delegate_to: localhost
      run_once: yes

    - name: Transmission-related admin kubeconfig to localhost
      ansible.builtin.copy:
        src: "{{ deploy_dir }}/context/admin.kubeconfig"
        dest: "~/.kube/config"
      delegate_to: localhost
      run_once: yes
  tags:
    - set-admin

- name: Start kube-master service
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    daemon_reload: yes
    enabled: yes
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  tags:
    - start-kube-master

- name: Transfer bootstrap secret file
  ansible.builtin.copy:
    src: bootstrap.secret.yaml
    dest: /etc/kubernetes/kubeconfig/
    mode: 0755
  tags:
    - create-bootstrap-secret
    - copy-bootstrap-secret

- name: Create bootstrap secret in cluster
  ansible.builtin.shell: >
    kubectl apply -f /etc/kubernetes/kubeconfig/bootstrap.secret.yaml
  run_once: yes
  tags:
    - create-bootstrap-secret